using DynamicData;
using DynamicData.Kernel;

using System.IO;
using System.Linq;
using System.Reactive.Linq;

using TableTopCrucible.Domain.Models.Sources;
using TableTopCrucible.Domain.Models.ValueTypes;
using TableTopCrucible.Domain.Models.ValueTypes.IDs;
using TableTopCrucible.Domain.Models.Views;

namespace TableTopCrucible.Domain.Services
{
    public interface IItemService : IDataService<Item, ItemId, ItemChangeset>
    {
        public void AutoGenerateItems();
    }
    public class ItemService : DataServiceBase<Item, ItemId, ItemChangeset>, IItemService
    {

        private IFileInfoService _fileService;
        public ItemService(IFileInfoService fileInfoService)
        {
            this._fileService = fileInfoService;


            this._getLatestItems = this._fileService
                .GetExtendedByHash()
                .Connect()
                .LeftJoin(
                    this.Get()
                        .Connect()
                        .Filter(item => item.File.HasValue),
                    (Item item) => item.File.Value,
                    (ExtendedFileInfo file, Optional<Item> item) => { return new { file, item }; })
                .Filter(x => x.item.HasValue)
                .Transform(x => new ExtendedItem(x.item.Value, x.file))
                .RemoveKey()
                .AddKey(x => x.Item.Id)
                .AsObservableCache();

            this._getExtended =
                this.Get()
                .Connect()
                .Filter(item => item.File.HasValue)
                .ChangeKey(item => item.File.Value)
                .LeftJoin(
                    this._fileService.GetExtendedByHash().Connect(),
                    (ExtendedFileInfo file) => new FileInfoHashKey(file.FileInfo),
                    (Item item, Optional<ExtendedFileInfo> file) => new ExtendedItem(item, file.Value))
                .AsObservableCache();
        }

        private readonly IObservableCache<ExtendedItem, ItemId> _getLatestItems;
        public IObservableCache<ExtendedItem, ItemId> GetLatestItems()
            => _getLatestItems;

        private readonly IObservableCache<ExtendedItem, FileInfoHashKey> _getExtended;
        public IObservableCache<ExtendedItem, FileInfoHashKey> GetExtended()
            => _getExtended;

        public void AutoGenerateItems()
        {
            var object3dExtensions = new string[] { ".obj", ".stl" };

            var files = this._fileService
                .GetExtendedByHash()
                .KeyValues
                .Where(x =>
                    object3dExtensions.Contains(
                        Path.GetExtension(x.Value.AbsolutePath)))
                .ToDictionary(x => x.Key, x => x.Value);

            var items = this
                .Get()
                .Items;

            var takenKeys = items
                .Where(x => x.File.HasValue)
                .Select(x => x.File.Value);

            var knownKeys = files
                .Select(x => x.Key);

            var s = Enumerable.Range(5, 10).Except(Enumerable.Range(3, 7));

            var freeKeys = knownKeys
                .Except(takenKeys);

            var changesets = freeKeys
                .Select(freeKey =>
                {
                    var file = files[freeKey];

                    return new ItemChangeset()
                    {
                        Name = Path.GetFileNameWithoutExtension(file.AbsolutePath),
                        Tags = new Tag[] { (Tag)"autogenerated" },
                    };
                }).ToArray();

            this.Patch(changesets);

        }
    }
}
